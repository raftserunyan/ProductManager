@using ProductManager.UI.Models;
@using ProductManager.UI.Pages;
@using ProductManager.UI.RequestModels.Product;
@using ProductManager.UI.Services.Product;
@using Radzen;

@page "/addProduct"

@inject IProductService _productService;
@inject NavigationManager _navManager;
@inject NotificationService _notificationService;

<div>
    <h2 class="mb-3">Add Product</h2>

    <div class="form-group mb-3">
        <label>Name</label>
        <input type="text" class="form-control" @bind="productRequest.Name" />
    </div>
    <div class="form-group mb-3">
        <label>Price</label>
        <input type="number" class="form-control" @bind="productRequest.Price" />
    </div>
    <div class="form-group mb-3">
        <label>Barcode</label>
        <input type="text" class="form-control" @bind="productRequest.Barcode" />
    </div>
    <div class="form-group mb-4">
        <label>PLU</label>
        <input type="number" class="form-control" @bind="productRequest.PLU" />
    </div>

    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
    <button type="button" class="btn btn-primary" @onclick="OnAdd">Save</button>
</div>

@code {
    private AddProductRequest productRequest;

    protected override void OnInitialized()
    {
        productRequest = new AddProductRequest();
    }

    private async Task OnAdd()
    {
        try
        {
            await _productService.AddProduct(productRequest);

            _navManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _notificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = ex.Message, 
                Duration = 5000
            });
        }
    }

    private void OnCancel()
    {
        _navManager.NavigateTo("/");
    }
}
