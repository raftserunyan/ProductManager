@using ProductManager.UI.Models;
@using ProductManager.UI.Services.Product;

@page "/editProduct/{productId}"

@inject IProductService _productService;
@inject NavigationManager _navManager;
@inject NotificationService _notificationService;

<div>
    <h2 class="mb-3">Edit Product</h2>

    <div class="form-group mb-3">
        <label>Name</label>
        <input type="text" class="form-control" @bind="product.Name" />
    </div>
    <div class="form-group mb-3">
        <label>Price</label>
        <input type="number" class="form-control" @bind="product.Price" />
    </div>
    <div class="form-group mb-3">
        <label>Barcode</label>
        <input type="text" class="form-control" @bind="product.Barcode" />
    </div>
    <div class="form-group mb-4">
        <label>PLU</label>
        <input type="number" class="form-control" @bind="product.PLU" />
    </div>

    <button type="button" class="btn btn-secondary" @onclick="OnClose">Cancel</button>
    <button type="button" class="btn btn-primary" @onclick="OnUpdate">Save Changes</button>
</div>

@code {
    [Parameter]
    public string productId { get; set; }

    ProductModel product = new ProductModel();

    protected override async Task OnInitializedAsync()
    {
        product = await _productService.GetById(int.Parse(productId));
    }

    private async Task OnUpdate()
    {
        try
        {
            await _productService.UpdateProduct(product);

            _navManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 5000
                });
        }
    }

    private void OnClose()
    {
        _navManager.NavigateTo("/");
    }
}
